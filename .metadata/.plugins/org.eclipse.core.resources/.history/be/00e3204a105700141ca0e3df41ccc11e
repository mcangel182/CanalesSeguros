package Seguridad;

import java.io.*;
import java.security.*;
import javax.crypto.*;

public class CifradoAsimetrico {
	
	private final static String ALGORITMO="RSA";
//	private KeyPair keyPair;

	public byte[] cifrar(PublicKey llavePublica, String text) {
		try {
//			KeyPairGenerator generator = 
//					KeyPairGenerator.getInstance(ALGORITMO);
//			generator.initialize(1024);
//			keyPair = generator.generateKeyPair();
			Cipher cipher = Cipher.getInstance(ALGORITMO);
			BufferedReader stdIn = 
					new BufferedReader(new InputStreamReader(System.in));
			String pwd = stdIn.readLine();
			byte [] clearText = pwd.getBytes();
			String s1 = new String (clearText);
			System.out.println("clave original: " + s1);
			cipher.init(Cipher.ENCRYPT_MODE, llavePublica);
			long startTime = System.nanoTime();
			byte [] cipheredText = cipher.doFinal(clearText);
			long endTime = System.nanoTime();
			System.out.println("clave cifrada: " + cipheredText);
			System.out.println("Tiempo asimetrico: " + 
					(endTime - startTime));
			return cipheredText;
		}
		catch (Exception e) {
			System.out.println("Excepcion: " + e.getMessage());
			return null;
		}
	}

	public static String descifrar(byte[] cipheredText, PrivateKey llavePrivada) {
		try {
			Cipher cipher = Cipher.getInstance(ALGORITMO);
			cipher.init(Cipher.DECRYPT_MODE, llavePrivada);
			byte [] clearText = cipher.doFinal(cipheredText);
			String res = new String(clearText);
			return res;
//			System.out.println("clave original: " + s3);
		} 
		catch (Exception e) {
			System.err.println("Descifrado Asim√©trico Excepcion: " + e.getMessage());
		}
		return null;
	}

}
