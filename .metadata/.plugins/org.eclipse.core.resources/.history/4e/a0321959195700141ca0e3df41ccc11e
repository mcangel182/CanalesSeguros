package Seguridad;

import java.io.*;
import java.math.BigInteger;
import java.security.*;
import java.security.cert.*;
import java.util.*;

import javax.security.auth.x500.X500Principal;

import org.bouncycastle.asn1.x509.X509Extensions;
import org.bouncycastle.x509.*;
import org.bouncycastle.x509.extension.AuthorityKeyIdentifierStructure;

public class CertificadoDigital {

	public static PublicKey darLlavePublica(byte[] certEnBytes){	
		try {
			InputStream inStream = new ByteArrayInputStream(certEnBytes);
			CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
			X509Certificate certificado = (X509Certificate) certFactory.generateCertificate(inStream);
			inStream.close();
			return certificado.getPublicKey();
		} catch (Exception e) {
			System.err.println("Llave Publica Exception: " + e.getMessage());
		}  
		return null;
	}

	public static X509Certificate generarCertificado(KeyPair keyPair){
		Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

		try {
			X509V3CertificateGenerator certGen = new X509V3CertificateGenerator();
			X500Principal dnName = new X500Principal("CN=Sergey");
			certGen.setSerialNumber(BigInteger.valueOf(System.currentTimeMillis()));
			certGen.setSubjectDN(dnName);
			certGen.setIssuerDN(caCert.getSubjectX500Principal());
			certGen.setNotBefore(validityBeginDate);
			certGen.setNotAfter(validityEndDate);
			certGen.setPublicKey(keyPair.getPublic());
			certGen.setSignatureAlgorithm("SHA256WithRSAEncryption");

			certGen.addExtension(X509Extensions.AuthorityKeyIdentifier, false, new AuthorityKeyIdentifierStructure(caCert));
			certGen.addExtension(X509Extensions.SubjectKeyIdentifier, false, new SubjectKeyIdentifierStructure(keyPair.getPublic()));

			X509Certificate cert = certGen.generate(caCertPrivateKey, "BC");
			return cert;
		} catch (CertificateEncodingException | InvalidKeyException
				| IllegalStateException | NoSuchProviderException
				| NoSuchAlgorithmException | SignatureException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
}
